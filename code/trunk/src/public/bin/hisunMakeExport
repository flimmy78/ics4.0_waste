#!/bin/ksh
#
#
# COMPONENT_NAME: (CC) IBM C and C++ Compilers
#
# FUNCTIONS: Create a C++ shared library from an export list and a list
#	     of object files.  Ensure that static constructors will be run.
#
# (C) COPYRIGHT International Business Machines Corp. 1991, 1997
# All Rights Reserved
# Licensed Materials - Property of IBM
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
EXE=${EXE-/usr/vacpp/exe}
BIN=${BIN-/usr/vacpp/bin}
LIB=${LIB-/usr/vacpp/lib}
OBJECT_MODE=${OBJECT_MODE:-32}
NM=${NM-/bin/nm -epC}
LD=ld
AS=as
CC=${BIN}/xlc

TMPDIR=${TMPDIR-/tmp}
TMPFILE=$TMPDIR/mcshl.exp.$$
EXPFILE=$TMPDIR/mcshl.tmpe.$$
RENAMEFILE=$TMPDIR/mcshl.ren.$$
LDOUTFILE=$TMPDIR/mcshl.ld.$$
LDLIBFILE=${TMPDIR:-/tmp}/mcshl.m.$$
CDTOR=${TMPDIR:-/tmp}/__cd$$
FILES="$TMPFILE $EXPFILE $RENAMEFILE $LDOUTFILE $LDLIBFILE $CDTOR.[sco]"

SAVEEXPFILE=
OUTPUT=shr.o
OPTIONS=
use_as=0
is64bit=0
munch_args=""
munch_args_X=""
ld_args=""
ld_args_X=""
cc_args=""
ENTRYOPTION="-bnoentry"
gen_shlib="-bM:SRE"
xlC_lib_dirs="-L$LIB"
case $(basename $0) in
(*_r)  # thread safe
	LIBCPP="$xlC_lib_dirs -lC_r -lC"
	LIBSYS="-L/usr/lib/threads -lpthreads -lm -lc_r -lc"
	;;
(*_r7)  # thread safe
	LIBCPP="$xlC_lib_dirs -lC_r -lC"
	LIBSYS="-L/usr/lib/threads -lpthreads_compat -lpthreads -lm -lc_r -lc"
	;;
(*128) # 128 bit long double 
	LIBCPP="$xlC_lib_dirs -lC128 -lC"
	LIBSYS="-lm -lc128 -lc"
	;;
(*) # non thread safe
	LIBCPP="$xlC_lib_dirs -lC"
	LIBSYS="-lm -lc"
	;;
esac

trap '/bin/rm -f $FILES' 0
trap '/bin/rm -f $FILES; exit 0' 2 3 15

function CreateExportList
{
    awk '{
	if ((($2 == "T") || ($2 == "D") || ($2 == "B")) \
		&& ( substr($1,1,1) != ".")) {
	    if (substr ($1, 1, 7) != "__sinit" &&
		    substr ($1, 1, 7) != "__sterm") {
		if (substr ($1, 1, 5) == "__tf1")
		    print (substr ($1, 7))
		else if (substr ($1, 1, 5) == "__tf9")
		    print (substr ($1, 15))
		else if (!('$incl_resource' && $1 == "__rsrc"))
		    print $1
	    }
	}
    }' 
}

function AddPriorityFuncToCDTOR_CC # __priorityXXXX cdtor_src is64bit
{
    echo "void $1() {}" >>$2
}

function AddPriorityFuncToCDTOR_AS # __priorityXXXX cdtor_src is64bit
{
    if [[ $3 -eq 1 ]]
    then
	ptr_word="llong"
	csect_ds=", 3"
	br="bclr"
    else
	ptr_word="long"
	csect_ds=", 3"
	br="bcr"
    fi
    cat - <<EOF >>$2
	.file	"$(basename $2)"
	.set	BO_ALWAYS,20
	.set	CR0_LT,0
	.rename H.NO_SYMBOL{PR},""
	.lglobl	H.NO_SYMBOL{PR}
	.rename H.$1{TC},"$1"
	.globl  .$1
	.globl  $1{DS}

	.csect	H.NO_SYMBOL{PR}
.$1:                            # 0x00000000 (H.NO_SYMBOL)
	$br     BO_ALWAYS,CR0_LT
	.long   0x00000000
# traceback table
	.byte   0x00                    # VERSION=0
	.byte   0x00                    # LANG=TB_C
	.byte   0x20                    # IS_GL=0,IS_EPROL=0,HAS_TBOFF=1
					# INT_PROC=0,HAS_CTL=0,TOCLESS=0
					# FP_PRESENT=0,LOG_ABORT=0
	.byte   0x40                    # INT_HNDL=0,NAME_PRESENT=1
					# USES_ALLOCA=0,CL_DIS_INV=WALK_ONCOND
					# SAVES_CR=0,SAVES_LR=0
	.byte   0x00                    # STORES_BC=0,FPR_SAVED=0
	.byte   0x00                    # GPR_SAVED=0
	.byte   0x00                    # FIXEDPARMS=0
	.byte   0x01                    # FLOATPARMS=0,PARMSONSTK=1
	.long   0x00000004              # TB_OFFSET
	.short  ${#1}         # NAME_LEN
	.byte   "$1"
# End of traceback table
EOF
    echo "	.toc" >>$2
    echo "T.$1:" >>$2
    echo "	.tc 	H.$1{TC},$1{DS}" >>$2
    echo "	.csect	$1{DS}$csect_ds" >>$2
    echo "	.$ptr_word	.$1" >>$2
    echo "	.$ptr_word	TOC{TC0}" >>$2
    echo "	.long	0x00000000" >>$2
    if [[ $3 -eq 1 ]]
    then
	echo "	.long	0x00000000" >>$2
    fi
}
# ----------------------- main() -------------------------

seen_files=0
seen_exp=0
seen_X_opt=0
ld_make_exp_list=0
incl_resource=0
nm_xc_arg=""
# Read the mixture of options and files preserving the order
while [[ $# -gt 0 ]]
do
	OPTIND=1
	while getopts "Sf:rGo:cxp:L:Z:l:E:I:b:e:n:X:" arg >/dev/null 2>&1
	do
    		case $arg in
			p) PRIO=$OPTARG;;
			E) ld_args="$ld_args -bE:$OPTARG"; seen_exp=1;;
			I) ld_args="$ld_args -bI:$OPTARG";;
			o) OUTPUT=$OPTARG;;
			x) LIBCPP=""; LIBSYS="";;
			e) SAVEEXPFILE=$OPTARG;;
			n) ld_args="$ld_args -e$OPTARG"; ENTRYOPTION="";;
			b) ld_args="$ld_args -$arg$OPTARG";
				case $OPTARG in
				expall) ld_make_exp_list=1;;
				noexpall) ld_make_exp_list=0;;
				esac
			;;
			L|Z|l) ld_args="$ld_args -$arg$OPTARG";;
			f) seen_files=1; ld_args="$ld_args -$arg$OPTARG";;
			c) munch_args="$munch_args -$arg";;
			G) gen_shlib="-G";;
			r) incl_resource=1;;
			S) use_as=1;;
                        X) ld_args_X="$ld_args_X -b$OPTARG"; 
                             munch_args_X="$munch_args_X -X$OPTARG";
                             cc_args="$cc_args -q$OPTARG";
			     nm_xc_arg="-X$OPTARG";
	   		     as_args_X="-a$OPTARG";
			     case $OPTARG in
			       (32) is64bit=0;;
			       (64) is64bit=1;;
			     esac
                             seen_X_opt=1;;
                        ?) : ;;
    		esac
	done
	shift $(($OPTIND -1))
	[[ $# -eq 0 ]] && break
	seen_files=1
	ld_args="$ld_args $1"
	shift
done

if [[ $OBJECT_MODE = "32_64" && seen_X_opt -eq 0 ]] then
           echo $(dspmsg xlClib.cat -s 4 4 '%s: 1543-305 OBJECT_MODE 32_64 is not a valid setting' $0)
           exit 7
elif [[ $OBJECT_MODE = "64" && seen_X_opt -eq 0 ]] then
           ld_args_X="$ld_args_X -b64"
           munch_args_X="$munch_args_X -X64"
	   as_args_X="-a64"
	   is64bit=1
elif [[ $OBJECT_MODE != "64" && $OBJECT_MODE != "32" && seen_X_opt -eq 0 ]] then
           echo $(dspmsg xlClib.cat -s 4 4 '%s: 1543-304 OBJECT_MODE must be either 32 or 64' $0)
           exit 6
fi

if [[ ! -f $CC ]]
then
  use_as=1
fi


if [[ -z "$PRIO" ]] 
then
    echo `dspmsg xlClib.cat -s 4 1 '%s: 1543-301 Priority must be specified' $0`
    exit 3;
fi

if [[ $seen_files -eq 0 ]] 
then
    echo `dspmsg xlClib.cat -s 4 2 '%s: 1543-302 No object files given on command line' $0`
    exit 4
fi

# bias PRIO by 2**31 (and convert to hex)
PRIO=0x$(bc << XX
obase=16
$PRIO + 2147483648
XX
)
priorityFnc="__priority$PRIO" 


$LD -bnobind $gen_shlib $ld_args_X $ld_args $xlC_lib_dirs >$LDLIBFILE
rc=$?
if [[ $rc -ne 0 ]]
then
	/bin/rm -f $LDLIBFILE
	exit $rc
fi

# create export list if needed
if [[ $ld_make_exp_list -eq 0 && $seen_exp -eq 0 ]] 
then
    /bin/rm -f $RENAMEFILE $EXPFILE
    cat $LDLIBFILE |
    while read c a f
    do
	case $c in 
	  (i) 
	      if [[ $a != "keep" ]] || [[ -z "$f" ]] 
	      then
	          f=$a
	      fi
	      $NM $f 2>/dev/null | CreateExportList >> $EXPFILE
	  ;;
	esac
    done
	
    /bin/sort -u $EXPFILE -o $EXPFILE; 
    ld_args="$ld_args -bE:$EXPFILE"
    if [[ -n "$SAVEEXPFILE" ]] 
    then
	/bin/cp $EXPFILE $SAVEEXPFILE
    fi
fi
# handle template functions and data (and create export list if needed)

