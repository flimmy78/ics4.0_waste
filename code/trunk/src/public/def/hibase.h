/******************************************************************************

				Copyright (C),1998-2003,Hisuntech Co.,Ltd.
 
 File name		: hibase.h 
 Author			: 谭亮
 Version		: V1.0 
 Date			: 2003.03.16 
 Description	: 基本库函数头文件
 Others			: 
 History		: 

  No.	Date		Author		Modification
  ===	==========	========	==============================================
   01   2003-03-16  谭亮		创建
   02   2008-11-29  LiangWJ     增加函数freePointerArray和parseStringByDelimiter
   
******************************************************************************/

#ifndef _LIB_BASE_H_
#define _LIB_BASE_H_

#ifdef DEBUG
	extern void hassert(char *FileName, int LineNo);
	#define HASSERT(f) \
		if(f) \
			hdonothing(); \
		else \
			hassert(__FILE__, __LINE__)
#else   
	#define HASSERT(f) hdonothing()
#endif

#include <stdlib.h>
#include <stdio.h>
//added by kixiong at 2009-3-11
#ifndef _H_STDARG
#include <stdarg.h>
#endif
#include <time.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <netdb.h>
#include <signal.h>
#include <unistd.h>
#include <sys/time.h>
#include <sys/timeb.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/signal.h>
#include <sys/sem.h>
#include <sys/ipc.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>

#ifndef	_HP_SYSTEM_
#include <sys/select.h>
#endif

/* 系统日志文件名 */
/* 改 system.log 为 SYS.log modify by liangwj in 20040525 */
#define SYS_LOG_FILE "SYS.log"

/* 日志目录的环境变量 */
/* 改为WORKDIR下的相对路径 */
#define LOG_DIR "log"
#define TRC_DIR "trc"

/* 删除空格函数中的标识 */
#define LEFT "left"
#define RIGHT "right"
#define BOTH "both"
#define ALL "all"

#ifdef LIB_BASE_EXTERN
#define EXTERN
#else
#define EXTERN	extern
#endif /* LIB_BASE_EXTERN */

char _local_ip[15+1];

#ifndef TRUE
#define TRUE 1
#endif
#ifndef FALSE
#define FALSE 0
#endif

/* 文件 amtproc.c */

EXTERN	char	*hamtadddot(char *);
/******************************************************************************
    Function      : hamtadddot()
    Description   : 给字符金额加小数点
    Input         : 参数一： 被转换的字符串
    Return        : 原字符串指针
******************************************************************************/

EXTERN	int		hamttocap(char *);
/******************************************************************************
    Function      : hamttocap()
    Description   : 金额转换为大写
    Input         : 参数一： 被转换的字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hamtdelzero(char *);
/******************************************************************************
    Function      : hamtdelzero()
    Description   : 去掉金额前面的所有'0'字符
    Input         : 参数一： 被转换的字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hamtfmt(char *);
/******************************************************************************
    Function      : hamtfmt()
    Description   : 格式化金额，去掉前面的零，加小数点和‘,’分隔符
    Input         : 参数一： 被转换的字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hamtsimplefmt(char *);
/******************************************************************************
    Function      : hamtsimplefmt()
    Description   : 简单格式化金额，去掉前面的零，加小数点
    Input         : 参数一： 被转换的字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

/* 文件 convert.c */

EXTERN	void	hhextoasc(char *, char *, int);
/******************************************************************************
    Function      : hhextoasc()
    Description   : 指定长度内，把16进制数据转换成asc码数据
    Input         : 参数一： 十六进制字符串
	                参数二： ASCII 码字符串
					参数三： 转换的长度，一般是ASCII 码字符串长度
    Return        : 无
******************************************************************************/

EXTERN	void	hasctohex(char *, char *, int);
/******************************************************************************
    Function      : hasctohex()
    Description   : 指定长度内，把asc码数据转换成16进制数据
    Input         : 参数一： ASCII 码字符串
	                参数二： 十六进制字符串
					参数三： 转换的长度，一般是十六进制字符串长度
    Return        : 无
******************************************************************************/

EXTERN	int		hinttostr(int, char *, int);
/******************************************************************************
    Function      : hinttostr()
    Description   : 指定长度内，整型转换位字符型
    Input         : 参数一： 整型数值
	                参数二： 输出字符串
					参数三： 字符串长度
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hbintoshort(unsigned char *, int len, short *);
/******************************************************************************
    Function      : hbintoshort()
    Description   : 把二进制数据转换成短整型
    Input         : 参数一： 二进制字符串
	                参数二： 字符串长度
					参数三： 短整型指针用于输出
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hbintolong(unsigned char *, int len, long *);
/******************************************************************************
    Function      : hbintolong()
    Description   : 把二进制数据转换成长整型
    Input         : 参数一： 二进制字符串
	                参数二： 字符串长度
					参数三： 长整型指针用于输出
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hshorttobin(short, int, unsigned char *);
/******************************************************************************
    Function      : hshorttobin()
    Description   : 把短整型转换成二进制
    Input         : 参数一： 短整型数
	                参数二： 二进制字符串长度
					参数三： 二进制字符串指针用于输出
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hlongtobin(long, int, unsigned char *);
/******************************************************************************
    Function      : hlongtobin()
    Description   : 把长整型转换成二进制
    Input         : 参数一： 长整型数
	                参数二： 二进制字符串长度
					参数三： 二进制字符串指针用于输出
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	short	hshortswap(short);
/******************************************************************************
    Function      : hshortswap()
    Description   : 短整型高低位互换
    Input         : 参数一：短整型数
    Return        : 互换后的短整型数
******************************************************************************/

EXTERN	long	hlongswap(long);
/******************************************************************************
    Function      : hlongswap()
    Description   : 长整型高低位互换
    Input         : 参数一：长整型数
    Return        : 互换后的长整型数
******************************************************************************/

/* 文件 datetime.c */

EXTERN	int		hisleapyear(int);
/******************************************************************************
    Function      : hisleapyear()
    Description   : 判断是否为润年
    Input         : 参数一： 年度
    Return        : 0，是；-1，不是
******************************************************************************/

EXTERN	int		hisvaliddate(char *);
/******************************************************************************
    Function      : hisvaliddate()
    Description   : 检查日期是否合法，精度为天,yyyymmdd
    Input         : 参数一： 日期字符串
    Return        : 0，是；-1，不是
******************************************************************************/

EXTERN	int		hgettoday(char *);
/******************************************************************************
    Function      : hgettoday()
    Description   : 获取当前日期 yyyymmdd
    Input         : 参数一： 日期字符串用于返回
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hgetdatetime(char *);
/******************************************************************************
    Function      : hgetdatetime()
    Description   : 获得当前时间，从年到秒，格式严格按照"4Y-2M-2D 2H:2M:2S"
    Input         : 参数一： 日期时间字符串用于返回
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hfmtdate(char *,char *, char *, char *);
/******************************************************************************
    Function      : hfmtdate()
    Description   : 对日期型数据按指定模式进行转换
    Input         : 参数一： 输入日期字符串
					参数二： 输入日期的类型
					参数三： 输出日期字符串
					参数四： 输出日期的类型
    Return        : 0，成功；-1，失败
	Others        : 日期类型 1：4Y/2M/2D；2：2M/2D/4Y；
							 3：4Y.2M.2D；4：4Y-2M-2D；
							 5：4Y年2M月2D日
					默认：4Y2M2D
******************************************************************************/

EXTERN	int		hcalcdate(char *, int, char, char *);
/******************************************************************************
    Function      : hcalcdate()
    Description   : 根据起始日期和日期期限，计算结束日期
    Input         : 参数一： 起始日期
					参数二： 日期期限
					参数三： 前后标志
					参数四： 结束日期
    Return        : 0，成功；-1，失败
	Others        : 日期格式为：yyyymmdd
					前后标志字段填写+或者-
******************************************************************************/

EXTERN	int		hgetsecond(char *);
/******************************************************************************
    Function      : hgetsecond()
    Description   : 取当前秒
    Input         : 参数一： 输出字符串
    Return        : 0，成功
	Others        : 
******************************************************************************/

EXTERN	int		hgetmicrosecond(char *);
/******************************************************************************
    Function      : hgetmicrosecond()
    Description   : 取微秒
    Input         : 参数一： 输出字符串
    Return        : 0，成功；-1，失败
	Others        : 字符串至少六位
******************************************************************************/

EXTERN	float	hdifftime(struct timeb, struct timeb);
/******************************************************************************
    Function      : hdifftime()
    Description   : 获取时间差
    Input         : 参数一： 后一个时间
					参数二： 前一个时间
    Return        : 0，成功；-1，失败
	Others        : 
******************************************************************************/

struct timeval  haddtimeval(struct timeval srctv, struct timeval addtv);
/******************************************************************************
    Function      : haddtimeval()
    Description   : 计算时间
    Input         : 参数一： 起点时间
                                        参数二： 增加时间
    Return        : 时间差
        Others        :
******************************************************************************/

EXTERN struct timeval  hdifftimeval(struct timeval time2, struct timeval time1);
/******************************************************************************
    Function      : hdifftimeval()
    Description   : 获取时间差
    Input         : 参数一： 后一个时间
                                        参数二： 前一个时间
    Return        : 0，成功；-1，失败
        Others        :
******************************************************************************/

EXTERN	void	hnsleep(long);
/******************************************************************************
    Function      : hnsleep()
    Description   : 等待一段时间
    Input         : 参数一： 等待时间
    Return        :
	Others        : 单位微妙
******************************************************************************/

EXTERN	int		hcvttime(time_t, char *);
/******************************************************************************
    Function      : hcvttime()
    Description   : 时间转换: 整型->字符串
    Input         : 参数一： 整型时间
	Output		  :	参数二： 格式化的时间字符串
    Return        :
	Others        : 最小单位妙
******************************************************************************/

EXTERN	int		hgetcurrenttime(char *);
/******************************************************************************
    Function      : hgetcurrenttime()
    Description   : 取当前系统时间:  hh:mm:ss.mmmm
    Input         : 参数一： 格式化的时间字符串
    Return        :
	Others        : 最小单位微妙
******************************************************************************/

EXTERN int hisyearend(char *);
/******************************************************************************
  Function		: hisyearend
  Description	: 判断指定日是否是年末
  Input			: 参数一：日期，YYYYMMDD
  Return		: 1  :年末  0  :不是年末
******************************************************************************/

EXTERN int hisquarterend(char *);
/******************************************************************************
  Function		: hisquarterend
  Description	: 判断指定日是否是季末
  Input			: 参数一：日期，YYYYMMDD
  Output		: 无
  Return		: 1  :季末  0  :不是季末
******************************************************************************/

EXTERN int hismonthend(char *);
/******************************************************************************
  Function		: hismonthend
  Description	: 判断指定日是否是月末
  Input			: 参数一：日期，YYYYMMDD
  Output		: 无
  Return		: 1  :月末  0  :不是月末
******************************************************************************/

EXTERN int hisweekend(char *);
/******************************************************************************
  Function		: hisweekend
  Description	: 判断指定日是否是周末
  Input			: 参数一：日期，YYYYMMDD
  Output		: 无
  Return		: 1  :周末(暂定星期六和星期天为周末)  0  :不是周末
******************************************************************************/

/* 文件 filelog.c */

EXTERN	int		hsavefile(char *, char *, int, char *);
/******************************************************************************
    Function      : hsavefile()
    Description   : 保存指定长度的字符串到文件中
    Input         : 参数一： 保存文件名
					参数二： 文件内容
					参数三： 文件长度
					参数四： 保存文件类型（w，替换；a，增加）
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hfilelog(char *, char *, ...);
/******************************************************************************
    Function      : hfilelog()
    Description   : 在指定文件中，写入指定格式的日志
    Input         : 参数一： 日志文件名
					参数二： 日志内容
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsyslog(char *, ...);
/******************************************************************************
    Function      : hsyslog()
    Description   : 写系统日志 SYS.log
    Input         : 参数一： 日志内容
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		happlog(char *, ...);
/******************************************************************************
    Function      : hsyslog()
    Description   : 写应用程序错误日志 SYS.log
    Input         : 参数一： 日志内容
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		herrlog(char *, char *, ...);
/******************************************************************************
    Function      : herrlog()
    Description   : 写错误日志
    Input         : 参数一： 日志文件名
					参数二： 日志内容
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hverrlog(char *, char *, va_list);
/******************************************************************************
    Function      : hverrlog()
    Description   : 写错误日志
    Input         : 参数一： 日志文件名
					参数二： 日志内容
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		htrace(char *, char *, ...);
/******************************************************************************
    Function      : htrace()
    Description   : 写调试日志
    Input         : 参数一： 日志文件名
					参数二： 日志内容
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hvtrace(char *, char *, va_list);
/******************************************************************************
    Function      : htrace()
    Description   : 写调试日志
    Input         : 参数一： 日志文件名
					参数二： 日志内容
    Return        : 0，成功；-1，失败
******************************************************************************/

/* 文件 fileop.c */

EXTERN	int		hfgetsize(FILE *);
/******************************************************************************
    Function      : hfgetsize()
    Description   : 得到文件大小
    Input         : 参数一： 文件描述符
    Return        : 文件大小
******************************************************************************/

EXTERN	int		hfreadline(FILE *, char *, int);
/******************************************************************************
    Function      : hfreadline()
    Description   : 读取指定文件一行
    Input         : 参数一： 文件描述符
					参数二： 用于输出的字符串
					参数三： 最大行长度（大于该长度忽略）
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hfreadpara(char *, char *, char *, char *);
/******************************************************************************
    Function      : hfreadpara()
    Description   : 从文件中读入变量名的值
    Input         : 参数一： 文件名
					参数二： 变量名
					参数三： 变量值，用于输出
					参数四： 默认值
    Return        : 0，成功；-1，失败
	Others        : 文件格式为：
						# 开始的是注释
						空行忽略
						每一行格式为：  参数名称 = 参数值
						参数名称和参数值中不能出现字符 # 和 =
						一行长度都不能超过 80
******************************************************************************/

EXTERN int hfilecopy(char *, char *);
/******************************************************************************
    Function      : hfilecopy()
    Description   : 拷贝文件
    Input         : 参数一： 源文件名
					参数二： 目标文件名
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN int hfilelines(char *, int *, long *);
/******************************************************************************
    Function      : hfilelines()
    Description   : 统计文件行数
    Input         : 参数一： 源文件名
                    参数二： 文件总行数，用于输出
                    参数三： 文件总字节，用于输出
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int hfreadtobuf(char *, char **);
/******************************************************************************
    Function      : hfreadtobuf()
    Description   : 读取文件的所有内容
    Input         : 参数一： 文件名
					参数二： 输出缓冲区指针
    Return        : >0，成功，文件大小；-1，失败
******************************************************************************/

EXTERN	int hexistpath(char *);
/******************************************************************************
    Function      : hexistpath()
    Description   : 判断文件目录是否存在
    Input         : 参数一： 目录名
    Return        : 1，目录存在；0，目录不存在或不可访问
******************************************************************************/

EXTERN	int hexistfile(char *);
/******************************************************************************
    Function      : hexistfile()
    Description   : 判断文件是否存在
    Input         : 参数一： 文件名
    Return        : 1，文件存在；0，文件不存在或不可访问
******************************************************************************/

EXTERN int hfilelock(char *filename);
/******************************************************************************
    Function      : hfilelock()
    Description   : 文件加锁
    Input         : 参数一： 文件名
    Return        : 0，加锁成功；-1，加锁失败
******************************************************************************/

EXTERN int hfileunlock(int fd);
/******************************************************************************
    Function      : hfileunlock()
    Description   : 文件解锁
    Input         : 参数一： 文件名
    Return        : 0，解锁成功
******************************************************************************/


/* 文件 ipcop.c */

EXTERN	int		hshmcreate(key_t, int, char **);
/******************************************************************************
    Function      : hshmcreate()
    Description   : 创建共享内存，连接到实际内存地址
    Input         : 参数一： 共享内存 KEY 值
					参数二： 共享内存的长度
					参数三： 共享内存连接地址的指针
    Return        : > 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hshmopen(key_t, char **);
/******************************************************************************
    Function      : hshmopen()
    Description   : 打开共享内存，连接到实际内存地址
    Input         : 参数一： 共享内存 KEY 值
					参数二： 共享内存连接地址的指针
    Return        : > 0，成功；-1，失败
******************************************************************************/

EXTERN int		hshmclose(char *);
/******************************************************************************
    Function      : hshmclose()
    Description   : 断开共享内存与内存地址间的连接
    Input         : 参数一： 共享内存连接地址
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hshmrm(int);
/******************************************************************************
    Function      : hshmrm()
    Description   : 删除共享内存
    Input         : 参数一： 共享内存 ID 值
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsemcreate(key_t);
/******************************************************************************
    Function      : hsemcreate()
    Description   : 创建信号量
    Input         : 参数一： 信号量 KEY 值
    Return        : > 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsemop(int, int);
/******************************************************************************
    Function      : hsemop()
    Description   : 对指定信号量进行指定的处理
    Input         : 参数一： 信号量 ID 值
					参数二： 对信号量的操作
    Return        : 0，成功；-1，失败
******************************************************************************/
				
EXTERN	int		hsempossess(int);
/******************************************************************************
    Function      : hsempossess()
    Description   : 指定信号量P操作
    Input         : 参数一： 信号量 ID 值
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsemvacate(int);
/******************************************************************************
    Function      : hsemvacate()
    Description   : 指定信号量V操作
    Input         : 参数一： 信号量 ID 值
    Return        : 0，成功；-1，失败
******************************************************************************/

/* 文件 mathcalc.c */

EXTERN	long	hgetrandom(void);
/******************************************************************************
    Function      : hgetrandom()
    Description   : 取随机长整型数
    Input         : 无
    Return        : 随机长整型数
******************************************************************************/

EXTERN	void	hsetrandom(void);
/******************************************************************************
    Function      : hsetrandom()
    Description   : 设置随机因子为当前时间
    Input         : 无
    Return        : 无
******************************************************************************/

EXTERN	int		hshortpower(int, unsigned int);
/******************************************************************************
    Function      : hshortpower()
    Description   : 短整型的幂
    Input         : 参数一：短整型数
					参数二：次方
    Return        : 幂
******************************************************************************/

EXTERN	long	hlongpower(long, unsigned int);
/******************************************************************************
    Function      : hlongpower()
    Description   : 长整型的幂
    Input         : 参数一：长整型数
					参数二：次方
    Return        : 幂
******************************************************************************/

EXTERN	double	hdoublepower(double, unsigned int);
/******************************************************************************
    Function      : hdoublepower()
    Description   : 长整型的幂
    Input         : 参数一：长整型数
					参数二：次方
    Return        : 幂
******************************************************************************/

/* 文件 socketop.c */

EXTERN	int		hsocketbindlisten(int);
/******************************************************************************
    Function      : hsocketbindlisten()
    Description   : TCP/IP 协议下邦定并且监听端口
    Input         : 参数一：端口号
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsocketaccept(int);
/******************************************************************************
    Function      : hsocketaccept()
    Description   : TCP/IP 协议下接收连接
    Input         : 参数一：监听的 Socket 描述符
    Return        : 连接后的 Socket 描述符
******************************************************************************/

EXTERN	int		hsocketconnect(char *, int);
/******************************************************************************
    Function      : hsocketconnect()
    Description   : TCP/IP 协议下连接IP和端口
    Input         : 参数一：IP 地址
					参数二：端口
    Return        : 连接后的 Socket 描述符
******************************************************************************/

EXTERN int	hsocketselect(int timeout, int sockfd);
/******************************************************************************
    Function      : hsocketselect()
    Description   : TCP/IP 协议下监听网络连接读状态，可设置超时
    Input         : 参数一：超时时间
					参数二：连接后的 Socket 描述符
    Return        : 请求读描述符，< 0；表示失败
******************************************************************************/

EXTERN int	hsocketsendselect(int timeout, int sockfd);
/******************************************************************************
    Function      : hsocketsendselect()
    Description   : TCP/IP 协议下监听网络连接写状态，可设置超时
    Input         : 参数一：超时时间
					参数二：连接后的 Socket 描述符
    Return        : >0表示当前socket可写; =0表示等待socket可写超时; < 0；表示失败
******************************************************************************/

EXTERN	int		hsocketclose(int);
/******************************************************************************
    Function      : hsocketclose()
    Description   : TCP/IP 协议下关闭网络 Socket 连接
    Input         : 参数一：连接后的 Socket 描述符
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsocketshutdown(int, int);
/******************************************************************************
    Function      : hsocketshutdown()
    Description   : TCP/IP 协议下关闭网络 Socket 连接
    Input         : 参数一：监听或者连接的 Socket 描述符
					参数二：关闭方式
							0，不允许继续接受数据
							1，不允许继续发送数据
							2，不允许继续通讯
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsocketwrite(int, char *, int);
/******************************************************************************
    Function      : hsocketwrite()
    Description   : TCP/IP 协议下写网络数据
    Input         : 参数一：连接后的 Socket 描述符
					参数二：发送字符串
					参数三：请求发送字节数
    Return        : 已经发送字节数
******************************************************************************/

EXTERN	int		hsocketread(int, char *, int);
/******************************************************************************
    Function      : hsocketread()
    Description   : TCP/IP 协议下读网络数据
    Input         : 参数一：连接后的 Socket 描述符
					参数二：接收字符串，用于输出
					参数三：请求接收字节数
    Return        : 已经接收字节数
******************************************************************************/

EXTERN	int	hsocketwritebylen(int, char *, int, int);
/******************************************************************************
    Function      : hsocketwritebylen()
    Description   : TCP/IP 协议下写带前置长度的网络数据
    Input         : 参数一：连接后的 Socket 描述符
					参数二：发送数据
					参数三：发送数据的长度
					参数四：前置长度的长度
    Return        : 已经发送的数据长度
******************************************************************************/

EXTERN	int	hsocketreadbylen(int, char **, int);
/******************************************************************************
    Function      : hsocketreadbylen()
    Description   : TCP/IP 协议下读带前置长度的网络数据
    Input         : 参数一：连接后的 Socket 描述符
					参数二：接收缓冲区指针
					参数三：前置长度的长度
    Return        : 已经接收字节数
******************************************************************************/

EXTERN	int		hgethostip(char *, int);
/******************************************************************************
    Function      : hgethostip()
    Description   : 取本地主机IP地址 
    Input         : 参数一：IP 地址字符串，用于输出
					参数二：IP 地址的长度
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN int     hgetip(char *name, char *ip, int len);
/******************************************************************************
    Function      : hgetip()
    Description   : 取指定主机IP地址
    Input         : 参数一：主机名
                    参数二：IP 地址字符串，用于输出
                    参数三：IP 地址的长度
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hsocketsetnodelay(int);
/******************************************************************************
    Function      : hsocketsetnodelay()
    Description   : 设置socket为非延时 
    Input         : 参数一：socket描述符
    Return        : 0，成功；-1，失败
******************************************************************************/

int	hsocketrecv(int, char *, int);
/******************************************************************************
    Function      : hsocketrecv()
    Description   : TCP/IP 协议下读网络数据(依赖对方关闭发送通道结束读取)
    Input         : 参数一：连接后的 Socket 描述符
					参数二：接收字符串，用于输出
					参数三：最大接收字符 
    Return        : 已经接收字节数
******************************************************************************/

EXTERN	int		hsocketsetlocalip(char *);
/******************************************************************************
    Function      : hsocketsetlocalip()
    Description   : 设置绑定的本地主机IP地址 
    Input         : 参数一：IP 地址
    Return        : 0，成功；-1，失败
******************************************************************************/

/* 文件 stringop.c */

EXTERN	void	*hmalloc(size_t);
/******************************************************************************
    Function      : hmalloc()
    Description   : 分配内存空间
    Input         : 参数一：分配内存大小
    Return        : 分配后的地址
******************************************************************************/

EXTERN	void	*hrealloc(void *, size_t);
/******************************************************************************
    Function      : hrealloc()
    Description   : 重分配内存空间
    Input         : 参数一：原内存地址
					参数二：重分配内存大小
    Return        : 分配后的地址
******************************************************************************/

EXTERN	void	hfree(void **);
/******************************************************************************
    Function      : hfree()
    Description   : 释放内存空间
    Input         : 参数一：需要释放的指针的地址
    Return        : 无
******************************************************************************/

EXTERN	int		hdelrightspace(char *);
/******************************************************************************
    Function      : hdelrightspace()
    Description   : 删除字符串右边空格
    Input         : 参数一：字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hdelleftspace(char *);
/******************************************************************************
    Function      : hdelleftspace()
    Description   : 删除字符串左边空格
    Input         : 参数一：字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hdelbothspace(char *);
/******************************************************************************
    Function      : hdelbothspace()
    Description   : 删除字符串两边空格
    Input         : 参数一：字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hdelallspace(char *);
/******************************************************************************
    Function      : hdelallspace()
    Description   : 删除字符串两边以及中间空格
    Input         : 参数一：字符串
    Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hdelspace(char *, char *);
/******************************************************************************
    Function      : hdelspace()
    Description   : 按模式删除空格
    Input         : 参数一：字符串
					参数二：模式，包括“left”“right”“both”“all”四种：
							“left”表示删除左边的空格；
							“right”表示删除右边空格；
							“both”表示删除两边的空格；
							“all”表示删除两边以及中间的空格；
	Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hstrncpy(char *, char *, size_t);
/******************************************************************************
    Function      : hstrncpy()
    Description   : 将参数二复制到参数一，形成字符串长度不能大于参数三
    Input         : 参数一：复制后字符串
					参数二：原字符串
					参数三：最大复制长度
	Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hcharncat(char *, char, size_t);
/******************************************************************************
    Function      : hcharncat()
    Description   : 将参数二连接在参数一后，形成字符串长度等于参数三
    Input         : 参数一：连接后字符串
					参数二：字符
					参数三：连接长度
	Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	void	hcharreplace(char *, char *, char);
/******************************************************************************
    Function      : hcharreplace()
    Description   : 将参数一中，出现在参数二中的字符都用参数三替换
    Input         : 参数一：原请求替换字符串
					参数二：要替换的字符组成的字符串
					参数三：替换为的字符
	Return        : 无
******************************************************************************/

EXTERN	int		hstrncat(char *, char *, size_t);
/******************************************************************************
    Function      : hstrncat()
    Description   : 将参数二连接在参数一之后，最大长度不超过参数三
    Input         : 参数一：连接后字符串
					参数二：原字符串
					参数三：最大连接长度
	Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		htoupper(char *,char *);
/******************************************************************************
    Function      : htoupper()
    Description   : 将参数一转换为大写付给参数二
    Input         : 参数一：原字符串
					参数二：转换后的字符串
	Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		htolower(char *,char *);
/******************************************************************************
    Function      : htolower()
    Description   : 将参数一转换为小写付给参数二
    Input         : 参数一：原字符串
					参数二：转换后的字符串
	Return        : 0，成功；-1，失败
******************************************************************************/

EXTERN	int		hisnumber(char *);
/******************************************************************************
    Function      : hisnumber()
    Description   : 测试输入字符串是否全部为数字型
    Input         : 参数一：字符串
	Return        : 0，是；-1，非
******************************************************************************/

EXTERN	int		hisint(char *);
/******************************************************************************
    Function      : hisint()
    Description   : 测试输入字符串是否为整数
    Input         : 参数一：字符串
	Return        : 1，是；0，非
******************************************************************************/

EXTERN	int		hcountchar(char *);
/******************************************************************************
    Function      : hcountchar()
    Description   : 计算字符串长度，以'\n'或'\0'为结束
    Input         : 参数一：字符串
	Return        : 字符串长度
******************************************************************************/

EXTERN	int		hgetcharpos(char *, unsigned char, int);
/******************************************************************************
    Function      : hgetcharpos()
    Description   : 查找某字符在字符串中的位置
    Input         : 参数一：字符串
					参数二：查找字符
					参数三：查找长度
	Return        : 字符串位置
******************************************************************************/

EXTERN	int		hgetlastcharpos(char *, unsigned char, int);
/******************************************************************************
    Function      : hgetlastcharpos()
    Description   : 查找某字符在字符串中最后一个的位置
    Input         : 参数一：字符串
					参数二：查找字符
					参数三：查找长度
	Return        : 字符串位置
******************************************************************************/

/******************************************************************************
    Function      : hgetcharnum()
    Description   : 查找某字符在字符串中出现的次数
    Input         : 参数一：字符串
                    参数二：查找字符
    Return        : 出现次数
******************************************************************************/
EXTERN int hgetcharnum(char * str, char ch);

EXTERN	int		hgetworddelimiter(char *, char *, char *, int);
/******************************************************************************
    Function      : hgetworddelimiter()
    Description   : 从字符串中按分隔符读入一个单词
    Input         : 参数一：输入字符串
					参数二：输出单词字符串
					参数三：输入分隔符字符串
					参数四：单词最大长度
	Return        : 单词的长度，-1，失败
******************************************************************************/

EXTERN	int		hgetwordspace(char *, char *);
/******************************************************************************
    Function      : hgetwordspace()
    Description   : 从字符串按' '，'\n'或者'\t'为分隔符读入一个单词
    Input         : 参数一：输入字符串
					参数二：输出单词字符串
	Return        : 单词的长度，-1，失败
******************************************************************************/

EXTERN	int		hgetstrstr(char *, int *, char *, int, int *);
/******************************************************************************
    Function      : hgetstrstr()
    Description   : 从字符串中按指定的方向找到指定字符串
    Input         : 参数一：输入字符串
					参数二：查找起始位置，同时用于输出的位置
					参数三：查找字符串
					参数四：查找方向（0，表示向右；1，表示向左）
					参数五: 查找字符串的长度
	Return        : 0，成功，-1，失败
******************************************************************************/

EXTERN	int		haddchar(char *, int, char, int);
/******************************************************************************
    Function      : haddchar()
    Description   : 字符串用指定字符指定方向扩展
    Input         : 参数一：输入字符串
					参数二：补满后长度
					参数三：要填充的字符
					参数四：填充方向（0，表示向右；1，表示向左）
	Return        : 0，成功，-1，失败
******************************************************************************/

EXTERN	int		hcutchar(char *, int);
/******************************************************************************
    Function      : hcutchar()
    Description   : 按指定长度截取字符串，剩余右边部分
    Input         : 参数一：输入字符串
					参数二：截取后长度
	Return        : 0，成功，-1，失败
******************************************************************************/

EXTERN	int		hisupper(char *);
/******************************************************************************
    Function      : hisupper()
    Description   : 判断字符串是否全为大写字符
    Input         : 参数一：字符串
	Return        : 0，是，-1，非
******************************************************************************/

EXTERN	int		hgetcharspos(char *, char *);
/******************************************************************************
    Function      : hgetcharspos()
    Description   : 查找字符串的位置
    Input         : 参数一：输入字符串
					参数二：查找字符串
	Return        : 字符串位置，< 0，失败
******************************************************************************/

EXTERN	int		hvalistalloc(int, char **, va_list *);
/********************************************************************
  Function:			hvalistalloc
  Description:		创建字符串类型的可变参数列表
  Input:			参数一：参数个数
  					参数二：参数变量数组
  Output:			参数三：可变参数列表
  Return:			0,  成功; -1, 错误
********************************************************************/

EXTERN	int		hvalistfree(va_list);
/********************************************************************
  Function:				hvalistfree
  Description:			释放可变参数列表
  Input:				参数一：要释放的可变参数列表
  Output:
  Return:				0,  成功; -1, 错误
********************************************************************/

EXTERN	int		hvaralloc(char ***, int, int);
/********************************************************************
  Function:				hvaralloc
  Description:			为字符串数组分配空间
  Input:				参数二：项数
  						参数三：项目大小
  Output:				参数一：字符串数组
  Return:				0, 成功; -1, 错误
********************************************************************/

EXTERN	int		hvarfree(char ***, int);
/********************************************************************
  Function:				hvarfree
  Description:			释放字符串数组
  Input:				参数一：要释放的字符串数组
  						参数二：数组个数
  Output:
  Return:				0, 成功; -1, 错误
********************************************************************/

EXTERN	int		hstrrep(char *, char *, char *);
/******************************************************************** 
  Function:       // hstrrep
  Description:    // 用串o替换串s中子串t
  Input:          // s    待替换的串
                  // t    被替换的串
                  // o    替换串
  Output:         // 
  Return:         // 0:成功 1:没有找到串t -1:失败
  Others:         // 
********************************************************************/

EXTERN	int		hstrrep_all(char *, char *, char *, char *);
/******************************************************************** 
  Function:       // hstrrep_all
  Description:    // 用串o替换串s中所有的子串t
  Input:          // d    替换后的串
                  // s    待替换的串
                  // t    被替换的串
                  // o    替换串
  Output:         // 
  Return:         // 0:成功 -1:失败
  Others:         // 
********************************************************************/

EXTERN	int		hdelchar(char *, char);
/******************************************************************** 
  Function:       // hdelchar
  Description:    // 删除字符串s中的c字符
  Input:          // s    待替换的串
                  // c    需要删除的字符
  Output:         // 
  Return:         // 0:成功 -1:失败
  Others:         // 
********************************************************************/

EXTERN	int		hdelctrl(char *);
/******************************************************************** 
  Function:       // hdelctrl
  Description:    // 删除字符串s中所有控制字符
  Input:          // s    待替换的串
  Output:         // 
  Return:         // 0:成功 -1:失败
  Others:         // 
********************************************************************/

EXTERN	int		hrepctrl(char *, char);
/******************************************************************** 
  Function:       // hrepctrl
  Description:    // 将字符串s中所有控制字符替换成指定字符
  Input:          // s    待替换的串
                  // c    替换后的字符
  Output:         // 
  Return:         // 0:成功 -1:失败
  Others:         // 
********************************************************************/

EXTERN	int		hsnprintf(char *, size_t, const char *, ...);
/******************************************************************** 
  Function:       // hsnprintf
  Description:    // 类似函数snprintf
  Input:          // s    输出字符串
                  // n    输出字符串最大长度
                  // fmt  字符串格式串
  Output:         // 
  Return:         // 输出字符串长度
  Others:         // 
********************************************************************/

EXTERN	int		hmalloc_sprintf(char **, const char *, ...);
/******************************************************************** 
  Function:       // hmalloc_sprintf
  Description:    // 类似函数sprintf,区别是缓冲区由函数内申请, 由调用者释放
  Input:          // s    输出字符串
                  // fmt  字符串格式串
  Output:         // 
  Return:         // >=0: 成功, 输出字符串长度
                  //  <0: 失败
  Others:         // 
********************************************************************/

EXTERN	int		hrealloc_sprintf(char **, size_t, const char *, ...);
/******************************************************************** 
  Function:       // hrealloc_sprintf
  Description:    // 类似函数sprintf,区别是缓冲区由函数内重新申请, 由调用者释放
                  // 格式字符串从原来字符串后面追加
  Input:          // s    输出字符串
                  // n    原来字符串长度
                  // fmt  字符串格式串
  Output:         // 
  Return:         // >=0: 成功, 输出字符串长度
                  //  <0: 失败
  Others:         // 
********************************************************************/

void freePointerArray(char **p, int num);
/******************************************************************** 
  Function:       // freePointerArray
  Description:    // 释放指针数组
  Input:          // p    指针数组
                  // num  指针数量
  Output:         // 
  Return:         // 无
  Others:         // 
********************************************************************/

EXTERN char **parseStringByDelimiter(char *strings, char ch, int *num);
/******************************************************************** 
  Function:       // parseStringByDelimiter
  Description:    // 根据分隔符解析字符串数组 
  Input:          // strings  字符串列表
                  // ch       字符串列表分隔符
  Output:         // num      字符串数量
  Return:         // 无
  Others:         // 
********************************************************************/

char * hrepallvar(char * str);
/******************************************************************** 
  Function:       // hrepallvar
  Description:    // 替换字符串中的所有环境变量 
  Input:          // str      字符串
  Output:         //
  Return:         // 替换后的字符串,需要释放内存
  Others:         // 
********************************************************************/
/* end of stringop.c */


/* 文件 udpop.c */

EXTERN	int	hudpbind(char *local_ip, int port);
/******************************************************************************
    Function      : hudpbind()
    Description   : 绑定UDP端口
                    参数一：绑定的本地IP（可选）
					参数二：本地UDP监听端口
    Return        : > 0，成功；<0，失败
******************************************************************************/

int	hudprecv(int sockfd, char *buf, int max_size, int *len, char *remote_ip, int *remote_port);
/******************************************************************************
    Function      : hudprecv()
    Description   : 接收数据
                    参数一：socket描述符
					参数二：接收缓冲区
					参数三：接收数据最大长度
					参数四：接收数据实际长度
					参数五：远程IP
					参数六：远程Port
    Return        : = 0，成功；<0，失败
******************************************************************************/

int	hudpsend(char *ip, int port, char *data, int len);
/******************************************************************************
    Function      : hudpsend()
    Description   : 发送UDP报文
    Input         : 参数一： 远程机器IP地址
					参数二： 远程机器UDP监听端口
					参数三： 发送数据
					参数四： 数据长度
    Return        : = 0，成功；-1，失败
******************************************************************************/

#undef EXTERN 

#endif /* _LIB_BASE_H_ */
 
